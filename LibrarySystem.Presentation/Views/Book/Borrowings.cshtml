@model LibrarySystem.Data.Results.PaginatedResponse<LibrarySystem.BusinessLogic.Books.DTOs.BookDto>
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Borrowed Books";

    int skip = ViewBag.Pagination?.Skip ?? 0;
    int take = ViewBag.Pagination?.Take > 0 ? ViewBag.Pagination.Take : 10;
    int currentPage = (skip / take) + 1;
    int totalPages = Model?.TotalCount > 0 ? (int)Math.Ceiling((double)Model.TotalCount / take) : 1;
    int startPage = Math.Max(1, currentPage - 2);
    int endPage = Math.Min(totalPages, currentPage + 2);
}

<div class="container py-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle me-2 fs-4"></i>
                <div>@TempData["SuccessMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-circle me-2 fs-4"></i>
                <div>@TempData["ErrorMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-6 fw-bold text-primary">
                <i class="fas fa-book-open me-2"></i>My Borrowed Books
            </h1>
            <p class="text-muted mb-0">Manage your current and past book loans</p>
        </div>
        <a asp-action="Index" class="btn btn-primary shadow-sm">
            <i class="fas fa-book me-2"></i> Browse Collection
        </a>
    </div>

    @if (Model?.Items?.Any() ?? false)
    {
        <div class="card shadow-sm border-0 overflow-hidden">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="bg-light-primary text-primary">
                            <tr>
                                <th class="ps-4"><i class="fas fa-book me-2"></i>Title</th>
                                <th><i class="fas fa-user-edit me-2"></i>Author</th>
                                <th><i class="fas fa-barcode me-2"></i>ISBN</th>
                                <th><i class="fas fa-calendar-alt me-2"></i>Borrowed Date</th>
                                <th><i class="fas fa-info-circle me-2"></i>Status</th>
                                <th class="text-end pe-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Items)
                            {
                                <tr class="border-top">
                                    <td class="ps-4 fw-semibold">@item.Title</td>
                                    <td>@item.Author</td>
                                    <td><span class="font-monospace">@item.ISBN</span></td>
                                    <td>
                                        <span class="text-nowrap">@item.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        <small class="d-block text-muted">@item.CreatedAt.ToString("hh:mm tt")</small>
                                    </td>
                                    <td>
                                        <span class="badge @(item.IsBorrowed ? "bg-warning" : "bg-success") rounded-pill px-3 py-2">
                                            <i class="fas @(item.IsBorrowed ? "fa-clock" : "fa-check-circle") me-1"></i>
                                            @(item.IsBorrowed ? "Borrowed" : "Returned")
                                        </span>
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="d-flex gap-2 justify-content-end">
                                            <a asp-action="Details" asp-route-id="@item.Id"
                                               class="btn btn-sm btn-outline-primary"
                                               data-bs-toggle="tooltip" title="View details">
                                                <i class="fas fa-eye me-1"></i>Details
                                            </a>
                                            @if (item.IsBorrowed)
                                            {
                                                <form asp-action="Return" asp-route-id="@item.Id" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit"
                                                            class="btn btn-sm btn-success"
                                                            data-bs-toggle="tooltip" title="Return book">
                                                        <i class="fas fa-undo me-1"></i>Return
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-4">
            <div class="mb-3 mb-md-0">
                <span class="text-muted">
                    Showing <span class="fw-semibold">@(skip + 1)-@Math.Min(skip + take, Model.TotalCount)</span>
                    of <span class="fw-semibold">@Model.TotalCount</span> books
                </span>
            </div>

            <nav aria-label="Page navigation">
                <ul class="pagination mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Borrowings", new { Skip = skip - take, Take = take })">
                            <i class="fas fa-chevron-left me-1"></i> Previous
                        </a>
                    </li>

                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Borrowings", new { Skip = 0, Take = take })">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Borrowings", new { Skip = (i - 1) * take, Take = take })">
                                @i
                            </a>
                        </li>
                    }

                    @if (endPage < totalPages)
                    {
                        @if (endPage < totalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Borrowings", new { Skip = (totalPages - 1) * take, Take = take })">
                                @totalPages
                            </a>
                        </li>
                    }

                    <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Borrowings", new { Skip = skip + take, Take = take })">
                            Next <i class="fas fa-chevron-right ms-1"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="card shadow-sm border-0">
            <div class="card-body text-center py-5">
                <div class="mb-4">
                    <i class="fas fa-book-open fa-4x text-muted opacity-25"></i>
                </div>
                <h3 class="h4 text-muted mb-3">No Borrowed Books Found</h3>
                <p class="text-muted mb-4">You haven't borrowed any books from our collection yet.</p>
                <a asp-action="Index" class="btn btn-primary px-4">
                    <i class="fas fa-book me-2"></i> Browse Books
                </a>
            </div>
        </div>
    }
</div>

@section Styles {
    <style>
        .bg-light-primary {
            background-color: rgba(13, 110, 253, 0.1);
        }

        .table-hover tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }

        .pagination .page-item.active .page-link {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: white !important;
        }

        .pagination .page-link {
            color: #0d6efd;
            min-width: 42px;
            text-align: center;
            padding: 0.375rem 0.75rem;
        }

        .badge.bg-warning {
            color: #000;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}